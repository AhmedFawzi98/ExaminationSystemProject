// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using ExaminationSystem.EntitiesExaminationSystem;
using Microsoft.EntityFrameworkCore;

namespace ExaminationSystem.ContextExaminationSystem;

public partial class Examination_SystemContext : DbContext
{
    public Examination_SystemContext()
    {
    }

    public Examination_SystemContext(DbContextOptions<Examination_SystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<ExamQuestion> ExamQuestions { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionChoice> QuestionChoices { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<StudentCourse> StudentCourses { get; set; }

    public virtual DbSet<StudentExamQuestion> StudentExamQuestions { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=26.82.203.83;Initial Catalog=Examination_System_Final;Persist Security Info=True;User ID=mostafaayman;Password=1234;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.CrId).HasName("PK_Courses_CrID");

            entity.HasIndex(e => e.CrName, "cr_name_unique").IsUnique();

            entity.Property(e => e.CrId)
                .ValueGeneratedNever()
                .HasColumnName("Cr_ID");
            entity.Property(e => e.CrName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Cr_Name");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DeptId).HasName("PK_Department_DeptID");

            entity.ToTable("Department");

            entity.Property(e => e.DeptId).HasColumnName("Dept_ID");
            entity.Property(e => e.DeptDescription).HasColumnName("Dept_Description");
            entity.Property(e => e.DeptName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Dept_Name");
            entity.Property(e => e.Location).HasMaxLength(50);
            entity.Property(e => e.MgrHireDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("MGR_HireDate");
            entity.Property(e => e.MgrId).HasColumnName("MGR_ID");
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.HasKey(e => e.ExId).HasName("PK_Exam_Ex_ID");

            entity.ToTable("Exam");

            entity.Property(e => e.ExId).HasColumnName("Ex_ID");
            entity.Property(e => e.CrId).HasColumnName("Cr_ID");
            entity.Property(e => e.IsAssigned)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValue("N")
                .IsFixedLength();
        });

        modelBuilder.Entity<ExamQuestion>(entity =>
        {
            entity.HasKey(e => new { e.QId, e.ExId }).HasName("PK_ExamQuestions_ExID_QID");

            entity.ToTable("Exam_Questions");

            entity.Property(e => e.QId).HasColumnName("Q_ID");
            entity.Property(e => e.ExId).HasColumnName("Ex_ID");
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.HasKey(e => e.InsId).HasName("PK_Instructor_InsID");

            entity.ToTable("Instructor");

            entity.HasIndex(e => e.Username, "UQ__Instruct__536C85E4419EC69B").IsUnique();

            entity.Property(e => e.InsId).HasColumnName("Ins_ID");
            entity.Property(e => e.DeptId).HasColumnName("Dept_ID");
            entity.Property(e => e.InsDegree)
                .HasMaxLength(50)
                .HasColumnName("Ins_Degree");
            entity.Property(e => e.InsName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Ins_Name");
            entity.Property(e => e.InsSalary)
                .HasColumnType("money")
                .HasColumnName("Ins_Salary");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Dept).WithMany(p => p.Instructors)
                .HasForeignKey(d => d.DeptId)
                .HasConstraintName("FK_Instructor_Ins_ID");

            entity.HasMany(d => d.Crs).WithMany(p => p.Ins)
                .UsingEntity<Dictionary<string, object>>(
                    "InstructorCourse",
                    r => r.HasOne<Course>().WithMany()
                        .HasForeignKey("CrId")
                        .HasConstraintName("FK_Instructor_Course_Cr_ID"),
                    l => l.HasOne<Instructor>().WithMany()
                        .HasForeignKey("InsId")
                        .HasConstraintName("FK_Instructor_Course_Ins_ID"),
                    j =>
                    {
                        j.HasKey("InsId", "CrId").HasName("PK_Instructor_Course_InsID_CrID");
                        j.ToTable("Instructor_Course");
                        j.IndexerProperty<int>("InsId").HasColumnName("Ins_ID");
                        j.IndexerProperty<int>("CrId").HasColumnName("Cr_ID");
                    });
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.QId).HasName("PK_Question_QID");

            entity.ToTable("Question");

            entity.Property(e => e.QId)
                .ValueGeneratedNever()
                .HasColumnName("Q_ID");
            entity.Property(e => e.CrId).HasColumnName("Cr_ID");
            entity.Property(e => e.ModelAnswer)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Model_Answer");
            entity.Property(e => e.QDifficulty)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Q_Difficulty");
            entity.Property(e => e.QGrade).HasColumnName("Q_Grade");
            entity.Property(e => e.QHead)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Q_Head");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.Cr).WithMany(p => p.Questions)
                .HasForeignKey(d => d.CrId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Question_Courses");
        });

        modelBuilder.Entity<QuestionChoice>(entity =>
        {
            entity.HasKey(e => new { e.QId, e.ChoiceSelector }).HasName("PK_Question_Choices_QID_ChoiceSelector");

            entity.ToTable("Question_Choices");

            entity.Property(e => e.QId).HasColumnName("Q_ID");
            entity.Property(e => e.ChoiceSelector)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Choice_Selector");
            entity.Property(e => e.ChoiceDesc)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("Choice_Desc");

            entity.HasOne(d => d.QIdNavigation).WithMany(p => p.QuestionChoices)
                .HasForeignKey(d => d.QId)
                .HasConstraintName("FK_Question_Choices_Question");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.StId).HasName("PK_Student_St_ID");

            entity.ToTable("Student");

            entity.HasIndex(e => e.Username, "UQ__Student__536C85E4CC56FF98").IsUnique();

            entity.HasIndex(e => e.StPhone, "UQ__Student__CD46D99E515C007F").IsUnique();

            entity.HasIndex(e => e.StEmail, "UQ__Student__EAF32BE0B33E2A9B").IsUnique();

            entity.Property(e => e.StId).HasColumnName("St_ID");
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.DeptId).HasColumnName("Dept_ID");
            entity.Property(e => e.StAge).HasColumnName("St_Age");
            entity.Property(e => e.StEmail)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("St_Email");
            entity.Property(e => e.StName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("St_Name");
            entity.Property(e => e.StPhone)
                .HasMaxLength(50)
                .HasColumnName("St_Phone");
            entity.Property(e => e.Street).HasMaxLength(50);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ZipCode)
                .HasMaxLength(50)
                .HasColumnName("Zip_Code");

            entity.HasOne(d => d.Dept).WithMany(p => p.Students)
                .HasForeignKey(d => d.DeptId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Student_Department");
        });

        modelBuilder.Entity<StudentCourse>(entity =>
        {
            entity.HasKey(e => new { e.StId, e.CrId }).HasName("PK_StudentCourse_StID_CrID");

            entity.ToTable("Student_Course");

            entity.Property(e => e.StId).HasColumnName("St_ID");
            entity.Property(e => e.CrId).HasColumnName("Cr_ID");
            entity.Property(e => e.StGrade)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("St_Grade");

            entity.HasOne(d => d.Cr).WithMany(p => p.StudentCourses)
                .HasForeignKey(d => d.CrId)
                .HasConstraintName("FK_StudentCourse_Courses");

            entity.HasOne(d => d.St).WithMany(p => p.StudentCourses)
                .HasForeignKey(d => d.StId)
                .HasConstraintName("FK_StudentCourse_Student");
        });

        modelBuilder.Entity<StudentExamQuestion>(entity =>
        {
            entity.HasKey(e => new { e.StId, e.ExamId, e.QId }).HasName("PK_Student_Exam_Questions_StID_ExamID_QID");

            entity.ToTable("Student_Exam_Questions");

            entity.Property(e => e.StId).HasColumnName("St_ID");
            entity.Property(e => e.ExamId).HasColumnName("Exam_ID");
            entity.Property(e => e.QId).HasColumnName("Q_ID");
            entity.Property(e => e.StAnswer)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("St_Answer");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Topic");

            entity.Property(e => e.CrId).HasColumnName("Cr_ID");
            entity.Property(e => e.TopicId)
                .ValueGeneratedOnAdd()
                .HasColumnName("Topic_ID");
            entity.Property(e => e.TopicName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Topic_Name");

            entity.HasOne(d => d.Cr).WithMany()
                .HasForeignKey(d => d.CrId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Topic_Cources");
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}